"""autogenerated by genpy from drrobot_jaguar4x4_player/PowerInfo.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class PowerInfo(genpy.Message):
  _md5sum = "13107d877ae888e7541f720d1432d852"
  _type = "drrobot_jaguar4x4_player/PowerInfo"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# battery /power information message from DrRobot Robot.

Header header    	# timestamp in the header is the time the driver
		 	# returned the battery/power reading
string robot_type	# robot type, I90 series, sentinel3 or Hawk/H20 Power/Motion

#below message is only I90 series with Power control system on robot, otherwise reserved
float32 bat1_vol	# battery1 voltage
float32 bat2_vol	# battery2 voltage
float32 bat1_temp	# battery1 temperature reading, now only is the AD value
float32 bat2_temp	# battery2 temperature reading, now only is the AD value
float32 dcin_vol	# dcin power voltage reading
float32 ref_vol		# board AD reference voltage reading
uint8 power_status	# power status, referee document to get detailed info for every bit
uint8 power_path	# power selected path, please referee DrRobot document
uint8 charge_path	# charger selected path, please referee DrRobot document


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['header','robot_type','bat1_vol','bat2_vol','bat1_temp','bat2_temp','dcin_vol','ref_vol','power_status','power_path','charge_path']
  _slot_types = ['std_msgs/Header','string','float32','float32','float32','float32','float32','float32','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,robot_type,bat1_vol,bat2_vol,bat1_temp,bat2_temp,dcin_vol,ref_vol,power_status,power_path,charge_path

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PowerInfo, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.robot_type is None:
        self.robot_type = ''
      if self.bat1_vol is None:
        self.bat1_vol = 0.
      if self.bat2_vol is None:
        self.bat2_vol = 0.
      if self.bat1_temp is None:
        self.bat1_temp = 0.
      if self.bat2_temp is None:
        self.bat2_temp = 0.
      if self.dcin_vol is None:
        self.dcin_vol = 0.
      if self.ref_vol is None:
        self.ref_vol = 0.
      if self.power_status is None:
        self.power_status = 0
      if self.power_path is None:
        self.power_path = 0
      if self.charge_path is None:
        self.charge_path = 0
    else:
      self.header = std_msgs.msg.Header()
      self.robot_type = ''
      self.bat1_vol = 0.
      self.bat2_vol = 0.
      self.bat1_temp = 0.
      self.bat2_temp = 0.
      self.dcin_vol = 0.
      self.ref_vol = 0.
      self.power_status = 0
      self.power_path = 0
      self.charge_path = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.robot_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_6f3B.pack(_x.bat1_vol, _x.bat2_vol, _x.bat1_temp, _x.bat2_temp, _x.dcin_vol, _x.ref_vol, _x.power_status, _x.power_path, _x.charge_path))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_type = str[start:end].decode('utf-8')
      else:
        self.robot_type = str[start:end]
      _x = self
      start = end
      end += 27
      (_x.bat1_vol, _x.bat2_vol, _x.bat1_temp, _x.bat2_temp, _x.dcin_vol, _x.ref_vol, _x.power_status, _x.power_path, _x.charge_path,) = _struct_6f3B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.robot_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_6f3B.pack(_x.bat1_vol, _x.bat2_vol, _x.bat1_temp, _x.bat2_temp, _x.dcin_vol, _x.ref_vol, _x.power_status, _x.power_path, _x.charge_path))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_type = str[start:end].decode('utf-8')
      else:
        self.robot_type = str[start:end]
      _x = self
      start = end
      end += 27
      (_x.bat1_vol, _x.bat2_vol, _x.bat1_temp, _x.bat2_temp, _x.dcin_vol, _x.ref_vol, _x.power_status, _x.power_path, _x.charge_path,) = _struct_6f3B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_6f3B = struct.Struct("<6f3B")
